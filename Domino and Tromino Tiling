You have two types of tiles: a 2 x 1 domino shape and a tromino shape. You may rotate these shapes.


Given an integer n, return the number of ways to tile an 2 x n board. Since the answer may be very large, return it modulo 109 + 7.

In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.

 

Example 1:


Input: n = 3
Output: 5
Explanation: The five different ways are show above.
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 1000
class Solution {
    int m = 1000000007;
    public int numTilings(int n) {
       int[] t = new int[1001];
       Arrays.fill(t, -1);
       return solve(n, t);
    }
    private int solve(int n, int[] t) {
        if(n == 1 || n == 2) {
            return n;
        }
        if(t[n] != -1) {
            return t[n];
        }
        if(n == 3) {
            return 5;
        }
        return t[n] = (2*solve(n-1, t)%m + solve(n-3, t)%m)%m;
    }
}
