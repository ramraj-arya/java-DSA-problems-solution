Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.

 

Example 1:

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Constraints:

1 <= intervals.length <= 105
intervals[i].length == 2
-5 * 104 <= starti < endi <= 5 * 104
class Solution {
    public int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0])); // start time sorted
        int count  = 0;
        int n = intervals.length;
        int i = 0, j = 1;
        while(j < n) {
            int[] curr_interval = intervals[i];
            int[] next_interval = intervals[j];
            int cs = curr_interval[0]; // curr start
            int ce = curr_interval[1];// curr end

            int ns = next_interval[0]; // next start
            int ne = next_interval[1]; // next end

            if(ce <= ns) {// no overlapping
               i = j;
               j++;
            } else if(ce <= ne) { // overlapping
               j++;
               count++;
            }else if(ce >= ne) {// overlapping
               i = j;
               j++;
               count++;
            }
        }
        return count;
    }
}
